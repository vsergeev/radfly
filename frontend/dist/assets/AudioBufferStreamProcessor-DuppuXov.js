var u=Object.defineProperty;var l=(n,t,o)=>t in n?u(n,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[t]=o;var f=(n,t,o)=>l(n,typeof t!="symbol"?t+"":t,o);(function(){"use strict";class n{constructor(e,r,s){f(this,"buffer");f(this,"read_index");f(this,"write_index");this.buffer=new Float32Array(e),this.read_index=new Uint32Array(r),this.write_index=new Uint32Array(s)}_writeAvailable(e,r){return e<=r?this.buffer.length-r+e-1:e-r-1}_readAvailable(e,r){return e<=r?r-e:this.buffer.length-e+r}writeAvailable(){return this._writeAvailable(Atomics.load(this.read_index,0),Atomics.load(this.write_index,0))}readAvailable(){return this._readAvailable(Atomics.load(this.read_index,0),Atomics.load(this.write_index,0))}write(e){const r=Atomics.load(this.read_index,0),s=Atomics.load(this.write_index,0);if(this._writeAvailable(r,s)<e.length)return!1;if(s+e.length<this.buffer.length)this.buffer.subarray(s,s+e.length).set(e),Atomics.store(this.write_index,0,s+e.length);else{const i=this.buffer.length-s;this.buffer.subarray(s).set(e.subarray(0,i)),this.buffer.subarray(0,e.length-i).set(e.subarray(i)),Atomics.store(this.write_index,0,e.length-i)}return!0}read(e){const r=Atomics.load(this.read_index,0),s=Atomics.load(this.write_index,0);if(this._readAvailable(r,s)<e.length)return!1;if(r+e.length<this.buffer.length)e.set(this.buffer.subarray(r,r+e.length)),Atomics.store(this.read_index,0,r+e.length);else{const i=this.buffer.length-r;e.set(this.buffer.subarray(r)),e.subarray(i).set(this.buffer.subarray(0,e.length-i)),Atomics.store(this.read_index,0,e.length-i)}return!0}reset(){Atomics.store(this.write_index,0,0),Atomics.store(this.read_index,0,0)}}class t extends AudioWorkletProcessor{constructor(r){super();f(this,"ring_buffer");f(this,"loaded",!1);this.ring_buffer=new n(r.processorOptions.buffer_sab,r.processorOptions.read_index_sab,r.processorOptions.write_index_sab),this.port.onmessage=s=>{s.data==="reset"&&(this.ring_buffer.reset(),this.loaded=!1)}}process(r,s,i){if(!this.loaded){if(this.ring_buffer.readAvailable()<this.ring_buffer.buffer.length/2)return!0;this.loaded=!0}return this.ring_buffer.read(s[0][0])||console.warn("Audio buffer underrun, skipping samples..."),!0}}registerProcessor("audio-buffer-stream-processor",t)})();
